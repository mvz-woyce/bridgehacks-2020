vectorizer = TfidfVectorizer(min_df = 5,
                             max_df = 0.8,
                             sublinear_tf = True,
                             use_idf = True)

/home/mannan/.local/lib/python3.6/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Results for SVC(kernel=linear)
Training time: 8.498604s; Prediction time: 1.508006s
other_useful_information:  {'precision': 0.44886363636363635, 'recall': 0.2677966101694915, 'f1-score': 0.3354564755838641, 'support': 295}
treatment:  {'precision': 0.8059701492537313, 'recall': 0.36, 'f1-score': 0.49769585253456217, 'support': 150}
disease_transmission:  {'precision': 0.7777777777777778, 'recall': 0.3333333333333333, 'f1-score': 0.4666666666666666, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.8, 'recall': 0.6666666666666666, 'f1-score': 0.7272727272727272, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7118205349439172, 'recall': 0.9095920617420066, 'f1-score': 0.7986447241045499, 'support': 907}
prevention:  {'precision': 0.6923076923076923, 'recall': 0.41379310344827586, 'f1-score': 0.5179856115107914, 'support': 87}
deaths_reports:  {'precision': 0.8376068376068376, 'recall': 0.6490066225165563, 'f1-score': 0.7313432835820897, 'support': 151}
affected_people:  {'precision': 0.6925925925925925, 'recall': 0.8348214285714286, 'f1-score': 0.7570850202429149, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

vectorizer = TfidfVectorizer(min_df = 5,
                             max_df = 0.5,
                             sublinear_tf = True,
                             use_idf = True)

/home/mannan/.local/lib/python3.6/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Results for SVC(kernel=linear)
Training time: 8.411269s; Prediction time: 1.470130s
other_useful_information:  {'precision': 0.44886363636363635, 'recall': 0.2677966101694915, 'f1-score': 0.3354564755838641, 'support': 295}
treatment:  {'precision': 0.8059701492537313, 'recall': 0.36, 'f1-score': 0.49769585253456217, 'support': 150}
disease_transmission:  {'precision': 0.7777777777777778, 'recall': 0.3333333333333333, 'f1-score': 0.4666666666666666, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.8, 'recall': 0.6666666666666666, 'f1-score': 0.7272727272727272, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7118205349439172, 'recall': 0.9095920617420066, 'f1-score': 0.7986447241045499, 'support': 907}
prevention:  {'precision': 0.6923076923076923, 'recall': 0.41379310344827586, 'f1-score': 0.5179856115107914, 'support': 87}
deaths_reports:  {'precision': 0.8376068376068376, 'recall': 0.6490066225165563, 'f1-score': 0.7313432835820897, 'support': 151}
affected_people:  {'precision': 0.6925925925925925, 'recall': 0.8348214285714286, 'f1-score': 0.7570850202429149, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

vectorizer = TfidfVectorizer(min_df = 0.01,
                             max_df = 0.8,
                             sublinear_tf = True,
                             use_idf = True)

/home/mannan/.local/lib/python3.6/site-packages/sklearn/externals/joblib/externals/cloudpickle/cloudpickle.py:47: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
Results for SVC(kernel=linear)
Training time: 4.812847s; Prediction time: 0.799548s
other_useful_information:  {'precision': 0.4528301886792453, 'recall': 0.08135593220338982, 'f1-score': 0.13793103448275862, 'support': 295}
treatment:  {'precision': 0.6037735849056604, 'recall': 0.21333333333333335, 'f1-score': 0.31527093596059114, 'support': 150}
disease_transmission:  {'precision': 0.7142857142857143, 'recall': 0.23809523809523808, 'f1-score': 0.35714285714285715, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.6666666666666666, 'recall': 0.6666666666666666, 'f1-score': 0.6666666666666666, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.6551982049364248, 'recall': 0.9658213891951488, 'f1-score': 0.7807486631016042, 'support': 907}
prevention:  {'precision': 0.75, 'recall': 0.06896551724137931, 'f1-score': 0.12631578947368421, 'support': 87}
deaths_reports:  {'precision': 0.8411214953271028, 'recall': 0.5960264900662252, 'f1-score': 0.6976744186046512, 'support': 151}
affected_people:  {'precision': 0.6795774647887324, 'recall': 0.8616071428571429, 'f1-score': 0.7598425196850394, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

tweet-preprocessor

Results for SVC(kernel=linear)
Training time: 8.299448s; Prediction time: 1.439744s
other_useful_information:  {'precision': 0.45698924731182794, 'recall': 0.288135593220339, 'f1-score': 0.35343035343035345, 'support': 295}
treatment:  {'precision': 0.7941176470588235, 'recall': 0.36, 'f1-score': 0.49541284403669716, 'support': 150}
disease_transmission:  {'precision': 0.9333333333333333, 'recall': 0.3333333333333333, 'f1-score': 0.4912280701754386, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.8, 'recall': 0.6666666666666666, 'f1-score': 0.7272727272727272, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7208695652173913, 'recall': 0.9140022050716649, 'f1-score': 0.806028196402528, 'support': 907}
prevention:  {'precision': 0.6923076923076923, 'recall': 0.41379310344827586, 'f1-score': 0.5179856115107914, 'support': 87}
deaths_reports:  {'precision': 0.8245614035087719, 'recall': 0.6225165562913907, 'f1-score': 0.7094339622641509, 'support': 151}
affected_people:  {'precision': 0.6897810218978102, 'recall': 0.84375, 'f1-score': 0.7590361445783133, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

After a lot of changes

Results for SVC(kernel=linear)
Training time: 5.693094s; Prediction time: 0.868729s
other_useful_information:  {'precision': 0.42920353982300885, 'recall': 0.3288135593220339, 'f1-score': 0.37236084452975043, 'support': 295}
treatment:  {'precision': 0.7397260273972602, 'recall': 0.36, 'f1-score': 0.48430493273542596, 'support': 150}
disease_transmission:  {'precision': 0.6470588235294118, 'recall': 0.2619047619047619, 'f1-score': 0.37288135593220334, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.7058823529411765, 'recall': 0.6666666666666666, 'f1-score': 0.6857142857142857, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7252047315741583, 'recall': 0.8787210584343991, 'f1-score': 0.7946161515453638, 'support': 907}
prevention:  {'precision': 0.673469387755102, 'recall': 0.3793103448275862, 'f1-score': 0.4852941176470588, 'support': 87}
deaths_reports:  {'precision': 0.8333333333333334, 'recall': 0.6622516556291391, 'f1-score': 0.7380073800738008, 'support': 151}
affected_people:  {'precision': 0.6886446886446886, 'recall': 0.8392857142857143, 'f1-score': 0.7565392354124749, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

remove stopwords and emoticons

[1874 rows x 2 columns]
Results for SVC(kernel=linear)
Training time: 7.903996s; Prediction time: 1.364260s
other_useful_information:  {'precision': 0.4482758620689655, 'recall': 0.30847457627118646, 'f1-score': 0.3654618473895582, 'support': 295}
treatment:  {'precision': 0.7714285714285715, 'recall': 0.36, 'f1-score': 0.49090909090909085, 'support': 150}
disease_transmission:  {'precision': 0.6521739130434783, 'recall': 0.35714285714285715, 'f1-score': 0.4615384615384615, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.8, 'recall': 0.6666666666666666, 'f1-score': 0.7272727272727272, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7402714932126697, 'recall': 0.9018743109151047, 'f1-score': 0.8131212723658052, 'support': 907}
prevention:  {'precision': 0.7037037037037037, 'recall': 0.4367816091954023, 'f1-score': 0.5390070921985816, 'support': 87}
deaths_reports:  {'precision': 0.8135593220338984, 'recall': 0.6357615894039735, 'f1-score': 0.7137546468401488, 'support': 151}
affected_people:  {'precision': 0.6818181818181818, 'recall': 0.8705357142857143, 'f1-score': 0.7647058823529411, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

add stopwords (no emoticons)

[1874 rows x 2 columns]
Results for SVC(kernel=linear)
Training time: 5.691570s; Prediction time: 0.873859s
other_useful_information:  {'precision': 0.42920353982300885, 'recall': 0.3288135593220339, 'f1-score': 0.37236084452975043, 'support': 295}
treatment:  {'precision': 0.7397260273972602, 'recall': 0.36, 'f1-score': 0.48430493273542596, 'support': 150}
disease_transmission:  {'precision': 0.6470588235294118, 'recall': 0.2619047619047619, 'f1-score': 0.37288135593220334, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.7058823529411765, 'recall': 0.6666666666666666, 'f1-score': 0.6857142857142857, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7252047315741583, 'recall': 0.8787210584343991, 'f1-score': 0.7946161515453638, 'support': 907}
prevention:  {'precision': 0.673469387755102, 'recall': 0.3793103448275862, 'f1-score': 0.4852941176470588, 'support': 87}
deaths_reports:  {'precision': 0.8333333333333334, 'recall': 0.6622516556291391, 'f1-score': 0.7380073800738008, 'support': 151}
affected_people:  {'precision': 0.6886446886446886, 'recall': 0.8392857142857143, 'f1-score': 0.7565392354124749, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app

emoticons (no stopwords)

[1874 rows x 2 columns]
Results for SVC(kernel=linear)
Training time: 7.912355s; Prediction time: 1.354880s
other_useful_information:  {'precision': 0.4482758620689655, 'recall': 0.30847457627118646, 'f1-score': 0.3654618473895582, 'support': 295}
treatment:  {'precision': 0.7714285714285715, 'recall': 0.36, 'f1-score': 0.49090909090909085, 'support': 150}
disease_transmission:  {'precision': 0.6521739130434783, 'recall': 0.35714285714285715, 'f1-score': 0.4615384615384615, 'support': 42}
disease_signs_or_symptoms:  {'precision': 0.8, 'recall': 0.6666666666666666, 'f1-score': 0.7272727272727272, 'support': 18}
not_related_or_irrelevant:  {'precision': 0.7402714932126697, 'recall': 0.9018743109151047, 'f1-score': 0.8131212723658052, 'support': 907}
prevention:  {'precision': 0.7037037037037037, 'recall': 0.4367816091954023, 'f1-score': 0.5390070921985816, 'support': 87}
deaths_reports:  {'precision': 0.8135593220338984, 'recall': 0.6357615894039735, 'f1-score': 0.7137546468401488, 'support': 151}
affected_people:  {'precision': 0.6818181818181818, 'recall': 0.8705357142857143, 'f1-score': 0.7647058823529411, 'support': 224}
Both vectorizer and classifier has been pickled. Check "classifier_flask" to load and use in flask app


Keras - deep learning

mannan@mannan-linux:~/hackathon/bridgehacks/trial/twitter-keras$ python3 make_model.py 
Using TensorFlow backend.
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:458: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint8 = np.dtype([("qint8", np.int8, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:459: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint8 = np.dtype([("quint8", np.uint8, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:460: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint16 = np.dtype([("qint16", np.int16, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:461: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint16 = np.dtype([("quint16", np.uint16, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:462: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint32 = np.dtype([("qint32", np.int32, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:465: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  np_resource = np.dtype([("resource", np.ubyte, 1)])
make_model.py:10: VisibleDeprecationWarning: Reading unicode strings without specifying the encoding argument is deprecated. Set the encoding, use None for the system default.
  training = np.genfromtxt('/home/mannan/hackathon/bridgehacks/trial/twitter-keras/data/covid-test-sheet-tabs-1.tsv', delimiter='\t', skip_header=0, usecols=(0, 1), dtype=None)
/home/mannan/.local/lib/python3.6/site-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order)
Train on 9495 samples, validate on 1055 samples
Epoch 1/5
2020-07-19 00:57:29.971765: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2020-07-19 00:57:29.971799: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
9495/9495 [==============================] - 12s - loss: 1.4756 - acc: 0.5012 - val_loss: 1.6321 - val_acc: 0.4133
Epoch 2/5
9495/9495 [==============================] - 11s - loss: 0.9888 - acc: 0.6745 - val_loss: 1.6069 - val_acc: 0.4607
Epoch 3/5
9495/9495 [==============================] - 11s - loss: 0.8114 - acc: 0.7289 - val_loss: 1.5831 - val_acc: 0.4616
Epoch 4/5
9495/9495 [==============================] - 11s - loss: 0.7004 - acc: 0.7557 - val_loss: 1.7176 - val_acc: 0.4474
Epoch 5/5
9495/9495 [==============================] - 12s - loss: 0.6160 - acc: 0.7837 - val_loss: 1.8463 - val_acc: 0.4483
saved model!
mannan@mannan-linux:~/hackathon/bridgehacks/trial/twitter-keras$ python3 make_model.py 
Using TensorFlow backend.
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:458: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint8 = np.dtype([("qint8", np.int8, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:459: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint8 = np.dtype([("quint8", np.uint8, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:460: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint16 = np.dtype([("qint16", np.int16, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:461: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_quint16 = np.dtype([("quint16", np.uint16, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:462: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  _np_qint32 = np.dtype([("qint32", np.int32, 1)])
/home/mannan/.local/lib/python3.6/site-packages/tensorflow/python/framework/dtypes.py:465: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  np_resource = np.dtype([("resource", np.ubyte, 1)])
make_model.py:10: VisibleDeprecationWarning: Reading unicode strings without specifying the encoding argument is deprecated. Set the encoding, use None for the system default.
  training = np.genfromtxt('/home/mannan/hackathon/bridgehacks/trial/twitter-keras/data/covid-test-sheet-tabs-1.tsv', delimiter='\t', skip_header=0, usecols=(0, 1), dtype=None)
/home/mannan/.local/lib/python3.6/site-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  return array(a, dtype, copy=False, order=order)
Train on 9495 samples, validate on 1055 samples
Epoch 1/10
2020-07-19 00:58:57.323740: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2020-07-19 00:58:57.323775: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
9495/9495 [==============================] - 11s - loss: 1.4473 - acc: 0.5216 - val_loss: 1.6180 - val_acc: 0.4284
Epoch 2/10
9495/9495 [==============================] - 11s - loss: 0.9778 - acc: 0.6757 - val_loss: 1.6472 - val_acc: 0.4455
Epoch 3/10
9495/9495 [==============================] - 11s - loss: 0.8039 - acc: 0.7264 - val_loss: 1.5916 - val_acc: 0.4531
Epoch 4/10
9495/9495 [==============================] - 11s - loss: 0.6924 - acc: 0.7627 - val_loss: 1.6904 - val_acc: 0.4550
Epoch 5/10
9495/9495 [==============================] - 11s - loss: 0.6185 - acc: 0.7870 - val_loss: 1.7649 - val_acc: 0.4483
Epoch 6/10
9495/9495 [==============================] - 11s - loss: 0.5531 - acc: 0.8086 - val_loss: 1.8796 - val_acc: 0.4351
Epoch 7/10
9495/9495 [==============================] - 11s - loss: 0.5117 - acc: 0.8190 - val_loss: 1.9493 - val_acc: 0.4341
Epoch 8/10
9495/9495 [==============================] - 12s - loss: 0.4687 - acc: 0.8332 - val_loss: 2.0171 - val_acc: 0.4360
Epoch 9/10
9495/9495 [==============================] - 11s - loss: 0.4420 - acc: 0.8423 - val_loss: 2.1497 - val_acc: 0.4246
Epoch 10/10
9495/9495 [==============================] - 11s - loss: 0.4207 - acc: 0.8501 - val_loss: 2.2104 - val_acc: 0.4199
saved model!

